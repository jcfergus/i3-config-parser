# Should you chane your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
#
# Startup
exec --no-startup-id "~/.config/linux-desktop-config/scripts/set_display_scale.sh"
exec --no-startup-id "/usr/bin/dunst -config ~/.dunstrc"
exec --no-startup-id "fusuma -d"
exec --no-startup-id "blueman-applet"
exec --no-startup-id "/usr/bin/flameshot"

# client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577
# client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a
# client.unfocused        #333333 #222222 #888888 #292d2e   #222222
# client.urgent           #2f343a #900000 #ffffff #900000   #900000
# client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c

# client.background       #ffffff

set $mod Mod1
set $mod2 Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
# font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:DejaVu Sans Mono 10

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod2

for_window [class="(?i)browserChooser.py"] floating enable
for_window [class="(?i)zoom"] floating enable
for_window [class="(?i)pavucontrol"] floating enable
for_window [class="(?i)simplenote"] floating enable
for_window [class="(?i)terraria"] floating enable
for_window [class="(?i)minecraft"] floating enable
for_window [class="(?i)blueman"] floating enable
for_window [class="(?i)kazam"] floating enable
for_window [title="Connect to WiFi"] floating enable
for_window [title="Developer Tools"] floating enable
for_window [title="Audio Settings"] floating enable
for_window [title="Agenda for"] floating enable border none
for_window [title="Spotify"] floating enable
for_window [title="Slack"] floating enable

bindsym $mod2+p exec autorandr -c

# bindsym $mod2+z exec ZOOMCURWS=`i3-msg -t get_tree | jq '.. | select(type == "object") | select(.type == "workspace") as $ws | select(.floating_nodes[].nodes[].window_properties.class == "zoom") | $ws.name '` && WS=`i3-msg -t get_workspaces | jq '.[] | select(.focused == true) | .num'` && 
#
# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
bindsym $mod2+b exec "jumpapp -R -c TempBrowser -m /usr/bin/chromium-browser --temp-profile --class=\"TempBrowser\""
bindsym $mod2+Shift+b [class="(?i)tempbrowser"] move window to workspace $ws8

bindsym $mod2+n exec "jumpapp -R -m /snap/bin/simplenote"
bindsym $mod2+Shift+n [class="(?i)simplenote"] move window to workspace $ws8

# if spotify is not running, launch; 
# if spotify is in another workspace or scratchpad, bring to current workspace
# if spotify is in current workspace, send to scratchpad
bindsym $mod2+s WS=`i3-msg -t get_workspaces | jq '.[] | select(.focused == true) | .num | tostring'` && SPOTCURWS=`i3-msg -t get_tree | jq '.. | select(type == "object") | select(.type == "workspace") as $ws | select (.floating_nodes[].nodes[].window_properties.class == "Spotify") | $ws.name'` && if [ "$SPOTCURWS" = "" ]; then spotify; elif [ "$SPOTCURWS" = "$WS" ]; then i3-msg '[class="^Spotify.*"] move scratchpad'; else TMP=${WS%\"}; WS=${TMP#\"}; i3-msg "[class=\"^Spotify.*\"] move to workspace $WS"; fi

bindsym $mod2+z exec "jumpapp -R -c zoom -m /usr/bin/zoom"
bindsym $mod2+Shift+z [class="(?i)zoom"] move scratchpad

bindsym $mod2+Shift+s exec "/usr/bin/flameshot gui"

# start a terminal
bindsym $mod2+Return exec terminology

# kill focused window
bindsym $mod2+Shift+q kill

# start dmenu (a program launcher)
bindsym $mod2+space exec "rofi -show combi"
bindsym $mod+space exec dmenu_run
bindsym $mod+$mod2+space exec "~/.config/linux-desktop-config/scripts/dmenu_ql"

# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
# bindsym $mod+j focus left
# bindsym $mod+k focus down
# bindsym $mod+l focus up
# bindsym $mod+semicolon focus right

# Change focus with arrow keys
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move focused window with arrow keys.
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod2+Right split h

# split in vertical orientation
bindsym $mod2+Left split v

# enter fullscreen mode for the focused container
bindsym $mod2+Ctrl+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating / stickiness
bindsym $mod2+Up floating enable
bindsym $mod2+Down floating disable
bindsym $mod2+u sticky enable 
bindsym $mod2+Shift+u sticky disable 

# change focus between tiling / floating windows
bindsym $mod+Tab focus mode_toggle

# focus the parent container
bindsym $mod2+Shift+Up focus parent

# focus the child container
bindsym $mod2+Shift+Down focus child

bindsym $mod2+Tab workspace next
bindsym $mod2+Shift+Tab workspace previous

bindsym $mod2+a move scratchpad
bindsym $mod2+Shift+a scratchpad show

bindsym $mod+$mod2+Left move workspace to output left
bindsym $mod+$mod2+Right move workspace to output right

# bindsym $mod2+tilde exec --no-startup-ip i3-input -F 'rename workspace to "%s"' -P 'Rename to: '
# bindsym $mod2+grave exec --no-startup-id WS=`python3 -c "import json; print(next(filter(lambda w: w['focused'], json.loads('$(i3-msg -t get_workspaces)')))['num'])"`; i3-input -F 'rename workspace to "$WS:%s"' -P 'Rename to: '
bindsym $mod2+grave exec --no-startup-id WS=`i3-msg -t get_workspaces | jq '.[] | select(.focused == true) | .num'` && i3-input -F "rename workspace to \"$WS:%s\"" -P 'Rename to: '

# switch to workspace
set $ws1 "1"
bindsym $mod2+1 workspace number 1
bindsym $mod2+Shift+1 move container to workspace number 1
bindsym $mod2+Control+1 move workspace 1 to output current

set $ws2 "2"
bindsym $mod2+2 workspace number 2
bindsym $mod2+Shift+2 move container to workspace number 2
bindsym $mod2+Control+2 move workspace 2 to output current

set $ws3 "3"
bindsym $mod2+3 workspace number $ws3
bindsym $mod2+Shift+3 move container to workspace number $ws3
bindsym $mod2+Control+3 move workspace 3 to output current

set $ws4 "4"
bindsym $mod2+4 workspace number $ws4
bindsym $mod2+Shift+4 move container to workspace number $ws4
bindsym $mod2+Control+4 move workspace 4 to output current

set $ws5 "5"
bindsym $mod2+5 workspace number $ws5
bindsym $mod2+Shift+5 move container to workspace number $ws5
bindsym $mod2+Control+5 move workspace 5 to output current

set $ws6 "6"
bindsym $mod2+6 workspace number $ws6
bindsym $mod2+Shift+6 move container to workspace number $ws6
bindsym $mod2+Control+6 move workspace 6 to output current

set $ws7 "7"
bindsym $mod2+7 workspace number $ws7
bindsym $mod2+Shift+7 move container to workspace number $ws7
bindsym $mod2+Control+7 move workspace 7 to output current

set $ws8 "8"
bindsym $mod2+8 workspace number $ws8
bindsym $mod2+Shift+8 move container to workspace number $ws8
bindsym $mod2+Control+8 move workspace 8 to output current

set $ws9 "9"
bindsym $mod2+9 workspace number $ws9
bindsym $mod2+Shift+9 move container to workspace number $ws9
bindsym $mod2+Control+9 move workspace 9 to output current

set $ws10 "10"
bindsym $mod2+0 workspace number $ws10
bindsym $mod2+Shift+0 move container to workspace number $ws10
bindsym $mod2+Control+0 move workspace 10 to output current

bindsym $mod2+Control+Tab workspace back_and_forth

# reload the configuration file
bindsym $mod2+Control+q reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Control+Shift+q restart
# exit i3 (logs you out of your X session)
bindsym $mod2+Control+Shift+q exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt

        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod2+Shift+grave mode "resize"

bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 +2%
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -2%
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle

bindsym XF86MonBrightnessUp exec brightnessctl set +5%
bindsym XF86MonBrightnessDown exec brightnessctl set -5%

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
				colors {
					background #00000099
				}
				i3bar_command i3bar --transparency
				font pango: DejaVu Sans 10
        			status_command py3status -b --config ~/.config/i3status/i3status.conf 
				separator_symbol " # "
				output primary
}


# exec --no-startup-id "echo '======STARTUP=========' >> ~/.i3-log; i3-dump-log -f >> ~/.i3-log"
